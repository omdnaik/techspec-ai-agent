import com.vladsch.flexmark.html.HtmlRenderer;
import com.vladsch.flexmark.parser.Parser;
import com.vladsch.flexmark.util.data.MutableDataSet;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.apache.hc.core5.http.ContentType;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

public class ConfluenceMarkdownPublisher {

    public static void main(String[] args) throws Exception {
        String markdownPath = "README.md";
        String confluenceBaseUrl = "https://your-domain.atlassian.net/wiki";
        String spaceKey = "PROJ";
        String parentPageId = "123456789"; // Optional: set to null if not needed
        String pageTitle = "My Markdown Page";
        String username = "your-email@example.com";
        String apiToken = "your-confluence-api-token";

        // 1. Convert Markdown to HTML
        String markdown = Files.readString(Path.of(markdownPath));
        String html = convertMarkdownToHtml(markdown);

        // 2. Prepare JSON payload
        Map<String, Object> payload = new HashMap<>();
        payload.put("type", "page");
        payload.put("title", pageTitle);
        payload.put("space", Map.of("key", spaceKey));
        if (parentPageId != null) {
            payload.put("ancestors", new Object[]{Map.of("id", parentPageId)});
        }
        payload.put("body", Map.of(
            "storage", Map.of(
                "value", html,
                "representation", "storage"
            )
        ));

        // 3. Send REST API request
        String json = new ObjectMapper().writeValueAsString(payload);
        HttpPost post = new HttpPost(confluenceBaseUrl + "/rest/api/content");
        post.setHeader("Authorization", "Basic " + Base64.getEncoder()
                .encodeToString((username + ":" + apiToken).getBytes()));
        post.setHeader("Content-Type", "application/json");
        post.setEntity(new StringEntity(json, ContentType.APPLICATION_JSON));

        try (CloseableHttpClient client = HttpClients.createDefault()) {
            var response = client.execute(post);
            System.out.println("Confluence response status: " + response.getCode());
        }
    }

    private static String convertMarkdownToHtml(String markdown) {
        MutableDataSet options = new MutableDataSet();
        Parser parser = Parser.builder(options).build();
        HtmlRenderer renderer = HtmlRenderer.builder(options).build();
        return renderer.render(parser.parse(markdown));
    }
}
